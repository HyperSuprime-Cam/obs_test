#<?cfg paf policy ?>

defects:    "../description/defects"

needCalibRegistry: false

levels: {
    skyTile: "visit"
    tract: "patch"
}
defaultLevel: "visit"
defaultSubLevels: {
}

exposures: {
    # dataset defined in obs_base modified in this mapper as follows:
    raw: {
        template:    "raw/raw_v%(visit)d_f%(filter)s.fits.gz"
    }
    rawAndFlat: {
        python: lsst.obs.test.RawAndFlatContainer
        composite: {
            raw: { 
                datasetType: raw
            }
            flat: { 
                datasetType: flat
            }
        }
        assembler:  lsst.obs.test.RawAndFlatAssembler
        disassembler:  lsst.obs.test.RawAndFlatDisassembler
    }
    # dataset defined in obs_base modified in this mapper as follows:
    postISRCCD: {
        template:    "postISRCCD/postISRCCD_v%(visit)d_f%(filter)s.fits"
    }
    # dataset defined in obs_base modified in this mapper as follows:
    icExp: {
        template:      "icExp/icExp_v%(visit)d_f%(filter)s.fits"
    }
    # dataset defined in obs_base modified in this mapper as follows:
    calexp: {
        template:      "calexp/calexp_v%(visit)d_f%(filter)s.fits"
    }
    # dataset defined in obs_base modified in this mapper as follows:
    wcs: {
        template:      "wcs/v%(visit)d_f%(filter)s.wcs.fits"
    }
    fcr: {
        template:      "fcr/v%(visit)d_f%(filter)s.fcr.fits"
        python:        "lsst.afw.image.ExposureI"
        persistable:        "ExposureI"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:        "raw"
        tables:        "raw_visit"
        tables:        "raw_skyTile"
    }
}

calibrations: {
    bias: {
        template:    "bias/bias.fits.gz"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Ccd"
    }
    dark: {
        template:    "dark/dark.fits.gz"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Ccd"
    }
    flat: {
        template:    "flat/flat_f%(filter)s.fits.gz"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Ccd"
        reference:    "raw"
        columns:      "filter"
    }
    fringe: {
        template:    "fringe/fringe_f%(filter)s.fits.gz"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Ccd"
        reference:    "raw"
        columns:      "filter"
    }
}

datasets: {
    test_config: {
        template:      "config/test.py"
        python:        "lsst.obs.test.TestConfig"
        persistable:      "Config"
        storage:    "ConfigStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    test_metadata: {
        template:      "test/v%(visit)d_f%(filter)s.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:        "PropertySet"
        storage:    "BoostStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    ampExposureId: {
        template:     "ignored"
        # Provide something to import, although we actually return a tuple
        python:       "lsst.daf.base.PropertySet"
        persistable:  "ignored"
        storage:      "ignored:ampExposureId"
        tables:       "raw"
    }
    ampExposureId_bits: {
        template:     "ignored"
        # Provide something to import, although we actually return a tuple
        python:       "lsst.daf.base.PropertySet"
        persistable:  "ignored"
        storage:      "ignored:ampExposureId_bits"
        tables:       "raw"
    }
    # dataset defined in obs_base modified in this mapper as follows:
    ccdExposureId: {
        # Provide something to import, although we actually return a tuple
        storage:      "ignored:ccdExposureId"
    }
    # dataset defined in obs_base modified in this mapper as follows:
    ccdExposureId_bits: {
        # Provide something to import, although we actually return a tuple
        storage:      "ignored:ccdExposureId_bits"
    }
    icExpBackground: {
        template:      "icExp/icExpBackground_v%(visit)d_f%(filter)s.fits"
    }
    calexpBackground: {
        template:      "calexp/v%(visit)d/bkgd.fits"
    }
    icSrc: {
        template:      "icSrc/v%(visit)d_f%(filter)s.fits"
    }
    srcMatch: {
        template:      "srcMatch/v%(visit)d_f%(filter)s.fits"
    }
    forced_src: {
        template:      "forced/%(tract)d/v%(visit)d_f%(filter)s.fits"
        persistable:        "SourceCatalog"
    }
    forced_config: {
        template:      "config/forced.py"
        python:        "lsst.meas.base.forcedCcd.ForcedCcdMeasurementConfig"
        persistable:      "Config"
        storage:    "ConfigStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    forced_metadata: {
        template:      "forced_metadata/v%(visit)d_f%(filter)s.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:        "PropertySet"
        storage:    "BoostStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    forced_schema: {
        template:      "schema/forced.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:        "ignored"
        storage:    "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    src: {
        template:      "src/v%(visit)d_f%(filter)s.fits"
    }
    transformed_src: {
        template:      "transformed_src/v%(visit)d_f%(filter)s.fits"
        python:        "lsst.afw.table.BaseCatalog"
        persistable:   "ignored"
        storage:       "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    # dataset defined in obs_base modified in this mapper as follows:
    transformed_src_schema: {
        persistable:   "ignored"
    }
    Mosaic_metadata: {
        template:      "metadata/Mosaic.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:        "PropertySet"
        storage:    "BoostStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    processCcd_metadata: {
        template:      "processCcd_metadata/v%(visit)d_f%(filter)s.boost"
    }
    isr_config: {
        python:        "lsst.ip.isr.IsrTaskConfig"
    }
    isr_metadata: {
        template:      "isr_metadata/v%(visit)d_f%(filter)s.boost"
    }
    characterizeImage_metadata: {
        template:      "characterizeImage_metadata/v%(visit)d_f%(filter)s.boost"
    }
    calibrate_metadata: {
        template:      "calibrate_metadata/v%(visit)d_f%(filter)s.boost"
    }
    transformSrcMeasurement_metadata: {
        template:      "transformSrcMeasurement_metadata/v%(visit)d_f%(filter)s.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:   "PropertySet"
        storage:       "BoostStorage"
        tables:        raw
        tables:        raw_skyTile
    }

    other_photo_astro_ref: {
        persistable: SourceCatalog
        python: lsst.afw.table.SourceCatalog
        storage: FitsCatalogStorage
        table: ignored
        template: outher_photo_astro_ref/%(pixel_id)s.fits
    }
}
